/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.liferay.test;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Calendar;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

import jodd.http.HttpProgressListener;
import jodd.http.HttpRequest;
import jodd.http.HttpResponse;
import jodd.io.FileUtil;

public class JournalArticleCreator7010 {
	static File imageFile;
	static HttpRequest httpRequest;
	static int requestSize;
	static String groupIdAsString;
	static String ddmStructureKeyAsString;
	static String ddmTemplateKeyAsString;
	static long groupId;
	static long ddmStructureKey;
	static long ddmTemplateKey;
	static String imageFileNameString;
	static String imageFilePathString;
	static long folderId;
	static long classNameId;
	static long classPK;
	static long articleId;
	static boolean autoArticleId;
	static String layoutUuid;
	static boolean neverExpire;
	static boolean neverReview;
	static boolean indexable;
	static boolean smallImage;
	static String smallImageURL;
	static String smallFile;
	static String articleURL;
	static String username;
	static String password;

	public static void main(String[] args) throws IOException {
		createJournalArticleWithImage();
	}

	private static void createJournalArticleWithImage() throws IOException {
		// TODO: Currently, this app is not checking whether the image file already
		// exists on the Portal. It may be a good idea to create a method that checks
		// if the file already exists and deletes it, if it does.

//		username= JOptionPane.showInputDialog("Please enter the username:");
		username="test@liferay.com";
		
//		password= JOptionPane.showInputDialog("Please enter the password:");
		password="test";
		
		groupIdAsString = JOptionPane.showInputDialog("Please enter the groupId:");
		groupId = Integer.parseInt(groupIdAsString);

		ddmStructureKeyAsString = JOptionPane.showInputDialog("Please enter the ddmStructureKey:");
		ddmStructureKey = Integer.parseInt(ddmStructureKeyAsString);

		ddmTemplateKeyAsString = JOptionPane.showInputDialog("Please enter the ddmTemplateKey:");
		ddmTemplateKey = Integer.parseInt(ddmTemplateKeyAsString);

		// Note: In the Portal, the file size is checked here:
		// Control Panel / Configuration / System Settings / Documents and Media
		// / Maximum File Size

		JFileChooser chooser = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & GIF Images", "jpg", "gif");
		chooser.setFileFilter(filter);
		chooser.setDialogTitle("Please select the image you would like to upload");
		int returnVal = chooser.showOpenDialog(null);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			imageFile = chooser.getSelectedFile().getAbsoluteFile();
			System.out.println("You chose to upload this file: " + imageFilePathString);
		}

		imageFileNameString = imageFile.getName();
		byte[] bytes = FileUtil.readBytes(imageFile);

		String bytesString = Arrays.toString(bytes);
		String images = "{\"" + imageFileNameString + "\":" + bytesString + "}";

		String serviceContext = "{\"addGroupPermissions\":false" + 
				",\"addGuestPermissions\":false" + ", \"scopeGroupId\":\"0\"}";

		String actionUrl = "http://localhost:8080/api/jsonws/journal.journalarticle/add-article";
		
		// As a display date, we use yesterday: otherwise the article will be created with a
		// "scheduled" state, but we want the article to appear on the Portal immediately
		Calendar yesterday = Calendar.getInstance();
		yesterday.add(Calendar.DAY_OF_YEAR, -1);
		Calendar nextWeek = Calendar.getInstance();
		nextWeek.add(Calendar.WEEK_OF_YEAR, 1);
		int displayDateHour = yesterday.get(Calendar.HOUR_OF_DAY);
		int displayDateMinute = yesterday.get(Calendar.MINUTE);
		String timenow = displayDateHour + ":" + displayDateMinute;
		String titleMap = "{\"en_US\":\"Test Article created on " + timenow + "\"}";
		String descriptionMap = "{\"en_US\":\"Description SG2\"}";
		
		// Important note: the content variable must contain at least a root tag element,
		// otherwise the article will not be created
//		String content = "<?xml version=\"1.0\"?><root></root>";
		String content = "<?xml version=\"1.0\"?><root available-locales=\"fr_FR,en_US\" default-locale=\"en_US\"><dynamic-element name=\"text\" type=\"text\" index-type=\"keyword\" instance-id=\"fmcr\"><dynamic-content language-id=\"fr_FR\"><![CDATA[Bonjour, monde!]]></dynamic-content><dynamic-content language-id=\"en_US\"><![CDATA[Hello, world!]]></dynamic-content></dynamic-element></root>";

		folderId = 0;
		classNameId = 0;
		classPK = 0;
		articleId = 0;
		autoArticleId = true;
		layoutUuid = "";
		neverExpire = true;
		neverReview = true;
		indexable = true;
		smallImage = false;
		smallImageURL = "";
		smallFile = "";
		articleURL = "";
//		String username = "test@liferay.com";
//		String password = "test";

		HttpResponse httpResponse = HttpRequest.post(actionUrl).multipart(true) // this is the key, without this line
																				// only the small files can be uploaded
				.form("groupId", groupId, // 20142,
						"folderId", folderId,
						"classNameId", classNameId,
						"classPK", classPK,
						"articleId", articleId,
						"autoArticleId", autoArticleId,
						"titleMap", titleMap,
						"descriptionMap", descriptionMap,
						"content", content,
						"ddmStructureKey", ddmStructureKey, // 31865,
						"ddmTemplateKey", ddmTemplateKey, // 31873,
						"layoutUuid", layoutUuid,
						"displayDateMonth", "" + (yesterday.get(Calendar.MONTH)),
						"displayDateDay", "" + yesterday.get(Calendar.DAY_OF_MONTH),
						"displayDateYear","" + yesterday.get(Calendar.YEAR),
						"displayDateHour", "" + yesterday.get(Calendar.HOUR_OF_DAY),
						"displayDateMinute", "" + yesterday.get(Calendar.MINUTE),
						"expirationDateMonth", "" + (1 + nextWeek.get(Calendar.MONTH)),
						"expirationDateDay", "" + nextWeek.get(Calendar.DAY_OF_MONTH),
						"expirationDateYear", "" + nextWeek.get(Calendar.YEAR),
						"expirationDateHour", "" + nextWeek.get(Calendar.HOUR_OF_DAY),
						"expirationDateMinute", "" + nextWeek.get(Calendar.MINUTE),
						"neverExpire", neverExpire,
						"reviewDateMonth", "" + (1 + nextWeek.get(Calendar.MONTH)),
						"reviewDateDay", "" + nextWeek.get(Calendar.DAY_OF_MONTH),
						"reviewDateYear", "" + nextWeek.get(Calendar.YEAR),
						"reviewDateHour", "" + nextWeek.get(Calendar.HOUR_OF_DAY),
						"reviewDateMinute", "" + nextWeek.get(Calendar.MINUTE),
						"neverReview", neverReview,
						"indexable", indexable,
						"smallImage", smallImage,
						"smallImageURL", smallImageURL,
						"smallFile", smallFile,
						"images", images,
						"articleURL", articleURL,
						"serviceContext", serviceContext

				).monitor(new HttpProgressListener() {
					@Override
					public void transferred(int len) {
						requestSize = size;
						int percentage = (len * 100) / size;
						System.out.println("Uploaded: " + percentage + "%");
					}
				}).basicAuthentication(username, password).send();

		JOptionPane.showMessageDialog(null, httpResponse.toString(), "Response from the Portal: ",
				JOptionPane.INFORMATION_MESSAGE);

	}
}
